{"version":3,"sources":["../src/Helper.js"],"names":["date","options","Options","requestObject","data","statusCode","json","toObject","body","resolve","reject","getHistoricalData","indexNamesChecker","dateRangeChecker","metricsChecker","wayChecker","url","method","uri","datestamp","headers","Connection","resolveWithFullResponse","indexNames","allowedIndexNames","push","indexObject","name","replace","toLowerCase","formattedIndexNames","indexName","index","allowedIndexName","err","Error","dateRange","fromDate","toDate","hasOwnProperty","start","tz","subtract","end","metrics","allowedMetrics","wantedMetrics","metric","way","allowedWays"],"mappings":"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","file":"Helper.js","sourcesContent":["import { reduce, find, template, indexOf, forEach } from \"lodash\";\nimport moment from \"moment-timezone\";\nimport requestPromise from \"request-promise\";\nimport csvjson from \"csvjson\";\nimport indices from \"./Indices\";\n\nconst url = template(\n  \"https://www.nseindia.com/content/indices/ind_close_all_${datestamp}.csv\"\n);\n\nexport class Options {\n  constructor(date) {\n    this.method = \"GET\";\n    this.uri = url({ datestamp: date });\n  }\n  get requestObject() {\n    return {\n      method: this.method,\n      uri: this.uri,\n      headers: {\n        \"User-Agent\": \"request-promise\",\n        Connection: \"keep-alive\"\n      },\n      json: true,\n      resolveWithFullResponse: true\n    };\n  }\n}\n\nexport function indexNamesChecker(indexNames) {\n  let allowedIndexNames = [];\n\n  forEach(indices, indexObject => {\n    allowedIndexNames.push(indexObject.name);\n  });\n\n  if (\n    typeof indexNames === \"string\" &&\n    indexNames.replace(/\\s/g, \"\").toLowerCase() === \"all\"\n  ) {\n    return allowedIndexNames;\n  }\n\n  let formattedIndexNames = [];\n\n  for (let indexName of indexNames) {\n    let index = find(allowedIndexNames, allowedIndexName => {\n      return (\n        allowedIndexName.replace(/\\s/g, \"\").toLowerCase() ===\n        indexName.replace(/\\s/g, \"\").toLowerCase()\n      );\n    });\n\n    if (index) {\n      formattedIndexNames.push(index);\n    } else {\n      let err = template('indexName \"${indexName}\" do not exist');\n      throw new Error(err({ indexNames: index }));\n    }\n  }\n  return formattedIndexNames;\n}\n\nexport function dateRangeChecker(dateRange) {\n  let fromDate, toDate;\n\n  if (!dateRange.hasOwnProperty(\"start\")) {\n    throw new Error(\"dateRange.start not defined\");\n  } else {\n    try {\n      fromDate = moment(dateRange.start).tz(\"Asia/Kolkata\");\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  if (!dateRange.hasOwnProperty(\"end\")) {\n    toDate = moment()\n      .tz(\"Asia/Kolkata\")\n      .subtract(1, \"days\");\n  } else {\n    try {\n      toDate = moment(dateRange.end).tz(\"Asia/Kolkata\");\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  return { start: fromDate, end: toDate };\n}\n\nexport function metricsChecker(metrics) {\n  let allowedMetrics = [\n    \"pb\",\n    \"pe\",\n    \"dy\",\n    \"high\",\n    \"low\",\n    \"open\",\n    \"close\",\n    \"volume\",\n    \"turnover\"\n  ];\n\n  if (\n    typeof metrics === \"string\" &&\n    metrics.replace(/\\s/g, \"\").toLowerCase() === \"all\"\n  ) {\n    return allowedMetrics;\n  }\n\n  let wantedMetrics = {};\n\n  forEach(allowedMetrics, metric => {\n    wantedMetrics[metric] = false;\n  });\n\n  for (let metric of metrics) {\n    if (indexOf(allowedMetrics, metric) < 0) {\n      let err = template('metric \"${metric}\" does not exist');\n      throw new Error(err({ metric: metric }));\n    } else {\n      wantedMetrics[metric] = true;\n    }\n  }\n\n  return wantedMetrics;\n}\n\nexport function wayChecker(way) {\n  let allowedWays = [\"datewise\", \"metricwise\", \"indexwise\"];\n\n  if (indexOf(allowedWays, way) < 0) {\n    let err = template('Formatting type \"${way}\" does not exist');\n    throw new Error(err({ way: way }));\n  } else {\n    return way;\n  }\n}\n\nexport async function getHistoricalData(date) {\n  let options = new Options(date).requestObject;\n  try {\n    const data = await requestPromise(options);\n    if (data.statusCode == 200) {\n      let json = csvjson.toObject(data.body);\n      return Promise.resolve(json);\n    } else if (data.statusCode == 404) {\n      return Promise.resolve({});\n    }\n  } catch (err) {\n    return Promise.reject(err);\n  }\n}\n"]}