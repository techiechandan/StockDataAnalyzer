{"version":3,"sources":["../src/index.js"],"names":["dateRange","allData","i","start","format","end","Helper","getHistoricalData","data","add","extractData","arg","indexNames","metrics","way","indexNamesChecker","dateRangeChecker","date","metricsChecker","wayChecker","resolve","transformedData","transformData","err","reject"],"mappings":";;;;;;;;;;;;;;;;;;;sFA8BA,iBAA2BA,SAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AACMC,mBADN,GACgB,EADhB;AAGQC,aAHR,GAGYF,UAAUG,KAHtB;;AAAA;AAAA,kBAIID,EAAEE,MAAF,CAAS,UAAT,MAAyBJ,UAAUK,GAAV,CAAcD,MAAd,CAAqB,UAArB,CAJ7B;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAQuBE,OAAOC,iBAAP,CAAyBL,EAAEE,MAAF,CAAS,UAAT,CAAzB,CARvB;;AAAA;AAQUI,gBARV;;AASMP,oBAAQC,EAAEE,MAAF,CAAS,YAAT,CAAR,IAAkCI,IAAlC;AATN;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAKIN,cAAEO,GAAF,CAAM,CAAN,EAAS,MAAT,CALJ;AAAA;AAAA;;AAAA;AAAA,6CAeSR,OAfT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeS,W;;;;;kBA3BA,UAASC,GAAT,EAAc;AAC3B,MAAIC,aAAaD,IAAIC,UAAJ,IAAkB,KAAnC;AACA,MAAIC,UAAUF,IAAIE,OAAJ,IAAe,KAA7B;AACA,MAAIC,MAAMH,IAAIG,GAAJ,IAAW,UAArB;AACA,MAAI;AACFF,iBAAaN,OAAOS,iBAAP,CAAyBH,UAAzB,CAAb;AACA,QAAIZ,YAAYM,OAAOU,gBAAP,CAAwBL,IAAIM,IAA5B,CAAhB;AACAJ,cAAUP,OAAOY,cAAP,CAAsBL,OAAtB,CAAV;AACAC,UAAMR,OAAOa,UAAP,CAAkBL,GAAlB,CAAN;;AAEA,QAAIN,OAAOE,YAAYV,SAAZ,CAAX;AACA,QAAIc,QAAQ,UAAZ,EAAwB;AACtB,aAAO,kBAAQM,OAAR,CAAgBZ,IAAhB,CAAP;AACD,KAFD,MAEO;AACL,UAAIa,kBAAkBC,cAAcd,IAAd,EAAoBI,UAApB,EAAgCC,OAAhC,EAAyCC,GAAzC,CAAtB;AACA,aAAO,kBAAQM,OAAR,CAAgBC,eAAhB,CAAP;AACD;AACF,GAbD,CAaE,OAAOE,GAAP,EAAY;AACZ,WAAO,kBAAQC,MAAR,CAAeD,GAAf,CAAP;AACD;AACF,C;;AAvBD;;;;AACA;;IAAYjB,M;;;;;;AAwBZ,SAASgB,aAAT,CAAuBd,IAAvB,EAA6BI,UAA7B,EAAyCC,OAAzC,EAAkDC,GAAlD,EAAuD;AACrD;AACA,SAAO,4CAAP;AACD","file":"index.js","sourcesContent":["import moment from \"moment-timezone\";\nimport * as Helper from \"./Helper\";\n\nexport default function(arg) {\n  let indexNames = arg.indexNames || \"all\";\n  let metrics = arg.metrics || \"all\";\n  let way = arg.way || \"datewise\";\n  try {\n    indexNames = Helper.indexNamesChecker(indexNames);\n    let dateRange = Helper.dateRangeChecker(arg.date);\n    metrics = Helper.metricsChecker(metrics);\n    way = Helper.wayChecker(way);\n\n    let data = extractData(dateRange);\n    if (way === \"datewise\") {\n      return Promise.resolve(data);\n    } else {\n      let transformedData = transformData(data, indexNames, metrics, way);\n      return Promise.resolve(transformedData);\n    }\n  } catch (err) {\n    return Promise.reject(err);\n  }\n}\n\nfunction transformData(data, indexNames, metrics, way) {\n  // TODO: write transformation function\n  return \"Only `way : datewise` supported right now \";\n}\n\nasync function extractData(dateRange) {\n  let allData = {};\n  for (\n    let i = dateRange.start;\n    i.format(\"DDMMYYYY\") !== dateRange.end.format(\"DDMMYYYY\");\n    i.add(1, \"days\")\n  ) {\n    try {\n      let data = await Helper.getHistoricalData(i.format(\"DDMMYYYY\"));\n      allData[i.format(\"YYYY-MM-DD\")] = data;\n    } catch (err) {\n      // console.error(err);\n    }\n  }\n\n  return allData;\n}\n"]}