"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _promise = require("babel-runtime/core-js/promise");

var _promise2 = _interopRequireDefault(_promise);

var extractData = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(dateRange) {
    var allData, i, data;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            allData = {};
            i = dateRange.start;

          case 2:
            if (!(i.format("DDMMYYYY") !== dateRange.end.format("DDMMYYYY"))) {
              _context.next = 15;
              break;
            }

            _context.prev = 3;
            _context.next = 6;
            return Helper.getHistoricalData(i.format("DDMMYYYY"));

          case 6:
            data = _context.sent;

            allData[i.format("YYYY-MM-DD")] = data;
            _context.next = 12;
            break;

          case 10:
            _context.prev = 10;
            _context.t0 = _context["catch"](3);

          case 12:
            i.add(1, "days");
            _context.next = 2;
            break;

          case 15:
            return _context.abrupt("return", allData);

          case 16:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this, [[3, 10]]);
  }));

  return function extractData(_x) {
    return _ref.apply(this, arguments);
  };
}();

exports.default = function (arg) {
  var indexNames = arg.indexNames || "all";
  var metrics = arg.metrics || "all";
  var way = arg.way || "datewise";
  try {
    indexNames = Helper.indexNamesChecker(indexNames);
    var dateRange = Helper.dateRangeChecker(arg.date);
    metrics = Helper.metricsChecker(metrics);
    way = Helper.wayChecker(way);

    var data = extractData(dateRange);
    if (way === "datewise") {
      return _promise2.default.resolve(data);
    } else {
      var transformedData = transformData(data, indexNames, metrics, way);
      return _promise2.default.resolve(transformedData);
    }
  } catch (err) {
    return _promise2.default.reject(err);
  }
};

var _momentTimezone = require("moment-timezone");

var _momentTimezone2 = _interopRequireDefault(_momentTimezone);

var _Helper = require("./Helper");

var Helper = _interopRequireWildcard(_Helper);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function transformData(data, indexNames, metrics, way) {
  // TODO: write transformation function
  return "Only `way : datewise` supported right now ";
}
//# sourceMappingURL=index.js.map